---
- hosts: localhost
  vars_files:
    - ../vars/main.yml
  connection: local
  gather_facts: false

  vars:
    instances:
      - name: wlc.www.1
        group: "wlc-www"
        security_group: ["default", "wlc_http"]


    security_groups:
      - name: wlc_http
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress: []


  tasks:
    - name: Configure EC2 Security Groups.
      ec2_group:
        name: "{{ item.name }}"
        description: Example EC2 security group for A4D.
        region: "{{ aws_region | default('us-east-1') }}" # Oregon
        vpc_id: "{{vpc_id}}"
        state: present
        rules: "{{ item.rules }}"
        rules_egress: "{{ item.rules_egress }}"
      with_items: "{{security_groups}}"

    - name: Provision EC2 instances.
      ec2:
        key_name: "{{ssh_key}}"
        #aws_access_key: "{{aws_access_key}}"
        #aws_secret_key: "{{aws_secret_key}}"
        instance_tags:
          inventory_group: "{{ item.group | default('') }}"
          inventory_host: "{{ item.name | default('') }}"
        group: "{{ item.security_group | default('') }}"
        instance_type: "{{ item.type | default('t2.micro')}}"
        image: "{{ ami_id | default('ami-ae7bfdb8') }}" # CentOS Linux 7
        region: "{{ aws_region | default('us-east-1') }}" # N VA
        wait: yes
        wait_timeout: 500
        exact_count: 1
        count_tag:
          inventory_group: "{{ item.group | default('') }}"
          inventory_host: "{{ item.name | default('') }}"
      register: created_instances
      with_items: "{{instances}}"


    - name: Add EC2 instances to inventory groups.
      add_host:
        name: "{{ item.1.tagged_instances.0.public_ip }}"
        groups: "aws,{{ item.1.item.group }},{{ item.1.item.name }}"
        # You can dynamically add inventory variables per-host.
        ansible_user: centos #ec2-user
      when: item.1.instances is defined
      with_indexed_items: "{{created_instances.results}}"

# Run some general configuration on all AWS hosts.
- hosts: aws
  gather_facts: false

  tasks:
    - name: Wait for server to restart
      local_action:
        module: wait_for
        host: "{{ inventory_hostname }}"
        port: 22
        delay: 100
        timeout: 300
      become: no

    - name: Set selinux into 'permissive' mode.
      selinux: policy=targeted state=permissive
      become: yes
 
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      become: yes
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add sudoers users to wheel group
      become: yes
      user: name=bdgr groups=wheel append=yes state=present createhome=yes
       
    - name: Set up authorized keys for the bdgr user
      become: yes
      authorized_key: 
        user: bdgr 
        state: present
        key: "{{ lookup('file', '~/.ssh/windsor.pub') }}"

- hosts: aws
  gather_facts: true
  become: true
  roles:
    - role: freedomofpress.generate-ssl-cert 
      ssl_certificate_bit_length: 4096
      ssl_certificate_directory: /etc/pki/tls
      ssl_certificate_basename: apache-selfsigned

- hosts: aws
  gather_facts: true
  become: true
  vars_files:
    - ~/.virtualenvs/WLCWebsite/lib/python3.6/site-packages/ansible/galaxy/data/container_enabled/roles/geerlingguy.apache/vars/AmazonLinux.yml
  roles:
    - { role: geerlingguy.apache }



- hosts: aws
  gather_facts: true
  become: true
  roles:
    - { role: openstack-ansible-security }
    #- { role: geerlingguy.repo-epel }
  
#- hosts: aws
#  gather_facts: true
#  tasks:
#    - name: Remove centos user
#      become: true
#      become_user: bdgr
#      user:
#        name: centos
#        state: absent
#        remove: yes




